#!/bin/bash -l

# Confirm that an order was created.
LOOKED_UP_ORDER=$(curl -X GET -H "Authorization: ${HASHICUPS_TOKEN}" localhost:19090/orders/1 | jq -r .id)
if [ "$LOOKED_UP_ORDER" = "null" ]; then
    fail-message "You haven't created an order yet."
    exit 1
fi

# Check that the `hashicups/data_source_order.go` file exists
if ! test -f "$DATA_SOURCE_ORDERS_FILE"; then
    fail-message "You haven't created the '$DATA_SOURCE_ORDERS_FILE' file yet."
    exit 1
fi

# Check the contents of the `hashicups/data_source_order.go` file.
if ! grep -q 'func dataSourceOrder' "$DATA_SOURCE_ORDERS_FILE"; then
    fail-message "You need to define the 'dataSourceOrders' function in '$DATA_SOURCE_ORDERS_FILE'."
    exit 1
fi

# Check the function `dataSourceOrderRead` has been added to `hashicups/data_source_order.go`
if ! grep -q 'func dataSourceOrderRead' "$DATA_SOURCE_ORDERS_FILE"; then
    fail-message "You need to define the 'dataSourceOrderRead' function in '$DATA_SOURCE_ORDERS_FILE'."
    exit 1
fi

# Check the function `flattenOrderItemsData` has been added to `hashicups/data_source_order.go`
if ! grep -q 'func flattenOrderItemsData' "$DATA_SOURCE_ORDERS_FILE"; then
    fail-message "You need to define the 'flattenOrderItemsData' function in '$DATA_SOURCE_ORDERS_FILE'."
    exit 1
fi

# Check `hashicups/provider.go` has `hashicup_order` as a data source
if ! grep -q 'hashicups_order' "$PROVIDER_FILE"; then
    fail-message "You need to add 'hashicup_order' data source in '$PROVIDER_FILE'."
    exit 1
fi

# Check the `main.tf` file has the new data source and output
if ! grep -q 'data "hashicups_order" "order"' "$TF_MAIN_FILE"; then
    fail-message "You need to add the 'hashicups_order' data source in '$TF_MAIN_FILE'."
    exit 1
fi

if ! grep -q 'output "order"' "$TF_MAIN_FILE"; then
    fail-message "You need to add the 'order' output in '$TF_MAIN_FILE'."
    exit 1
fi

# TODO: Check the outputs from `teraform output` matches what we expect - this will work because of previous challenges
TF_OUTPUT_JSON=$(terraform output -json | jq -r .)
echo $TF_OUTPUT_JSON
